import React, { useMemo, useEffect } from 'react';
import Select from '~/components/form/Select';
import { VStack } from 'native-base';
import { useController, useFormContext } from 'react-hook-form';
import { useBrancheUser } from '~/hooks/useBranch';
import { nullFormat } from 'numeral';

const BranchGroup: React.FC<{
  control: any;
  branches: any[];

  dataAll: any;
  fieldDepartment?:string
}> = ({ control, branches,dataAll,fieldDepartment }) => {
  const { field: fieldZone } = useController({ name: 'zone_id', control });

  const { field: fieldParent } = useController({ name: 'branch_group_id', control });
  const { field: fieldUser } = useController({ name: 'branch_id', control });
  const branchId = fieldUser.value;
  const { setValue } = useFormContext();
  const { data: branchUserData, isLoading, error } = useBrancheUser(branchId);
  // Use effect to reset the branch field if zone is not selected
  // const filteredGroupBranch = useMemo(() => {
  //   const zoneIds =dataAll?.user_departments.filter(d=> d.department_id === fieldDepartment).zones

  // }, [fieldDepartment]);

  useEffect(() => {
    if (!fieldZone.value) {
      setValue('branch_id', '');
    }
  }, [fieldZone.value, setValue]);
  const uniqueData = Array.from(new Map(branches.map(item => [item.id, item])).values());
  const parentBranches = useMemo(() => {
    let branchIds = [];
    if (dataAll?.is_owner === true) {
        branchIds = uniqueData.filter(b => b.level === 1).map(item => item.id)
    } else {
        branchIds = dataAll?.user_departments.find((d: any) => d.department === fieldDepartment)?.branches;
    }
  
  
    if (branchIds) {
      const currentBranches = uniqueData
        .filter(b => Array.isArray(branchIds) ? branchIds.includes(b.id) : b.id === branchIds)
        .map(b => ({
          value: b.id,
          label: b.name,
          code: b.code,
          parentId: b.parentId,
          zoneId: b.zoneId, // Assuming zoneId is available here
        })) || [];
      const branchesFiltered = uniqueData
        ?.filter(b => b.isGroup)
        .filter(b => (Array.isArray(branchIds) ? branchIds.includes(b.id) : b.id === branchIds) 
                    || currentBranches.some(c => c.parentId === b.id))
        .map(b => ({
          value: b.id,
          label: b.name,
          code: b.code,
          zoneId: b.zoneId, // Assuming zoneId is available here
        })) || [];
      return branchesFiltered;
    }
  
    return [];
  }, [uniqueData, fieldDepartment, dataAll]);
  
  const childBranches = useMemo(() => {
    if (parentBranches.length > 0) {
      const parentBranchId = fieldParent.value; // Assuming fieldParent.value holds an object with value as id
      
      const parentZoneId = parentBranches.find(p => p.value === parentBranchId)?.zoneId;
      if(dataAll?.is_owner === true){
        return uniqueData
        ?.filter(b => !b.isGroup)
        .filter(b => parentBranchId ? b.parentId === parentBranchId : false)
        .map(b => ({
          value: b.id,
          label: b.name,
          code: b.code,
          zone:b.zoneId
        })) || [];
      }else{
        const a = uniqueData
        ?.filter(b => !b.isGroup)
        .filter(b => parentBranchId ? b.parentId === parentBranchId : false)
        .map(b => ({
          value: b.id,
          label: b.name,
          code: b.code,
          zone: b.zoneId
        })) || [];
      return  a.filter(item =>
        dataAll?.branches.some((branch:any) =>
          branch.id === item.value
        )
      );
      }
    
    }
  
    return [];
  }, [uniqueData, fieldParent.value, parentBranches]);
  
  const userOptions = useMemo(() => {
    if (branchUserData && branchUserData.length > 0) {

      return branchUserData?.filter((x: any)=>(x.deleted_at == null && x.status === "activate" )).map((data: any) => ({
        value: data.id,
        label: data.fullname || 'Unnamed', // Fallback to a default label if needed
        code: data.code || 'No Code', // Fallback to a default code if needed
      }));
    }
    return [];
  }, [branchUserData]);

  return (
    <VStack space={4}>
      {/* <Select
        control={control}
        name="branch_group_id"
        SelectProps={{
          placeholder: 'Tìm kiếm: Tên, mã nhóm chi nhánh...',
          accessibilityLabel: 'Chọn nhóm chi nhánh',
          options: parentBranches,
        }}
      />
      <Select
        control={control}
        name="branch_id"
        SelectProps={{
          placeholder: 'Tìm kiếm: Tên, mã chi nhánh...',
          accessibilityLabel: 'Chọn chi nhánh',
          options: childBranches,
        }}
      /> */}
      <Select
        control={control}
        name="approved_user_id"
        SelectProps={{
          placeholder: 'Tìm kiếm: Tên, mã ...',
          accessibilityLabel: 'Chọn người dùng phê duyệt',
          options: userOptions,
        }}
      />
    </VStack>
  );
};

export default BranchGroup;
